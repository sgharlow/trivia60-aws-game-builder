version: '3.8'

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: trivia_db
      TZ: America/Phoenix
    ports:
      - "5433:5432"  # Map to 5433 on host for development
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - shared_network

  get-questions:
    build: 
      context: ../apis/get-questions
      dockerfile: Dockerfile.node
    ports:
      - "${GET_QUESTIONS_PORT:-4001}:${GET_QUESTIONS_PORT:-4001}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${GET_QUESTIONS_PORT}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_NAME=${POSTGRES_DB}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - LOG_LEVEL=${LOG_LEVEL}
      - NODE_OPTIONS=--max-old-space-size=4096
    volumes:
      - ../apis/get-questions:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: 
        - "CMD"
        - "/bin/sh"
        - "-c"
        - "curl -f http://localhost:${GET_QUESTIONS_PORT:-4001}/api/health || exit 1"
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 200M
    networks:
      - shared_network

  add-questions:
    build: 
      context: ../apis/add-questions
      dockerfile: Dockerfile.node
    ports:
      - "${ADD_QUESTIONS_PORT:-4002}:${ADD_QUESTIONS_PORT:-4002}"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: trivia_db
      POSTGRES_NAME: trivia_db
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      REDDIT_CLIENT_ID: ${REDDIT_CLIENT_ID}
      REDDIT_CLIENT_SECRET: ${REDDIT_CLIENT_SECRET}
      NODE_OPTIONS: --max-old-space-size=4096
    volumes:
      - ../apis/add-questions:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    command: npm start
    networks:
      - shared_network

  leaderboard:
    build: 
      context: ../apis/leaderboard
      dockerfile: Dockerfile.node
    ports:
      - "${LEADERBOARD_PORT:-4003}:${LEADERBOARD_PORT:-4003}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${LEADERBOARD_PORT}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_NAME=${POSTGRES_DB}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - LEADERBOARD_API_KEY=${LEADERBOARD_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL}
      - NODE_OPTIONS=--max-old-space-size=4096
    volumes:
      - ../apis/leaderboard:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: 
        - "CMD"
        - "/bin/sh"
        - "-c"
        - "curl -f http://localhost:${LEADERBOARD_PORT:-4003}/api/health || exit 1"
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 200M
    networks:
      - shared_network

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.VanillaJS
    ports:
      - "${FRONTEND_PORT:-8088}:80"
    depends_on:
      - get-questions
      - add-questions
      - leaderboard
    networks:
      - shared_network

  monitor:
    build: 
      context: ../apis/monitor
      dockerfile: Dockerfile
    ports:
      - "${MONITOR_PORT:-4004}:${MONITOR_PORT:-4004}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${MONITOR_PORT}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_NAME=${POSTGRES_DB}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - NOTIFICATION_EMAIL=${NOTIFICATION_EMAIL}
      - LOG_LEVEL=${LOG_LEVEL}
      - NODE_OPTIONS=--max-old-space-size=4096
    volumes:
      - ../apis/monitor:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: 
        - "CMD"
        - "/bin/sh"
        - "-c"
        - "curl -f http://localhost:${MONITOR_PORT:-4004}/api/health || exit 1"
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 500M
        reservations:
          cpus: '0.25'
          memory: 200M
    networks:
      - shared_network

volumes:
  postgres_data:

networks:
  shared_network:
    driver: bridge
